---
title: "Client Report - If not now, when?"
subtitle: "Unit 3 Task 3"
author: "Ezekial Curran"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import polars as pl
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
flights_json = pl.read_json('flights_missing.json')
```


```{python}
# Beginning of cleaning the data
# print(flights_json.tail(5))

null_years = flights_json['year'].is_null()
for i in range(len(null_years)):
    if null_years[i] == True:
        temp_col = flights_json['year'].to_list()
        if i == 0:
            # print(f"Changed null at: {i}")
            temp_col[i] = flights_json['year'][i + 1]
        else:
            # print(f"Changed null at: {i}")
            temp_col[i] = flights_json['year'][i - 1]
        flights_json = flights_json.with_columns(pl.Series('year', temp_col))

# Fixing airport names:
for i in range(len(flights_json['airport_name'])):
    if flights_json['airport_name'][i] == "":
        port = (
            flights_json.filter((pl.col('airport_code') == flights_json['airport_code'][i]) & (pl.col('airport_name') != ""))
            .select('airport_name')
            .limit(1)
            .item()
        )
        port_ID = (
            flights_json.filter((pl.col('airport_code') == flights_json['airport_code'][i]) & (pl.col('airport_name') != ""))
            .select('airport_code')
            .limit(1)
            .item()
        )

        flights_json = flights_json.with_columns(
            pl.when(pl.col('airport_code') == port_ID)
            .then(pl.lit(port))
            .otherwise(pl.col('airport_name'))
            .alias('airport_name')
        )

carrier_col = flights_json['minutes_delayed_carrier'].to_list()
nas_col = flights_json['minutes_delayed_nas'].to_list()

for i in range(len(flights_json['minutes_delayed_total'])):
    if (carrier_col[i] == None) & (nas_col[i] == None):
        val = flights_json['minutes_delayed_total'][i] - (
            flights_json['minutes_delayed_late_aircraft'][i]
            + flights_json['minutes_delayed_security'][i]
            + flights_json['minutes_delayed_weather'][i]
        )
        carrier_col[i] = val / 2
        nas_col[i] = val / 2
    elif carrier_col[i] == None:
        val = flights_json['minutes_delayed_total'][i] - (
            flights_json['minutes_delayed_late_aircraft'][i]
            + flights_json['minutes_delayed_security'][i]
            + flights_json['minutes_delayed_weather'][i]
            + flights_json['minutes_delayed_nas'][i]
        )
        carrier_col[i] = val
    elif nas_col[i] == None:
        val = flights_json['minutes_delayed_total'][i] - (
            flights_json['minutes_delayed_late_aircraft'][i]
            + flights_json['minutes_delayed_security'][i]
            + flights_json['minutes_delayed_weather'][i]
            + flights_json['minutes_delayed_carrier'][i]
        )
        nas_col[i] = val

flights_json = flights_json.with_columns(pl.Series('minutes_delayed_carrier', carrier_col, dtype=pl.Float64), pl.Series('minutes_delayed_nas', nas_col, dtype=pl.Float64))

col_sz = len(flights_json['month'])
months = flights_json['month'].to_list()
mon_dic = {0: "January", 1: "February", 2: "March", 3: "April", 4: "May", 5: "June", 6: "July", 7: "August", 8: "September", 9: "October", 10: "November", 11: "December"}

cur_mon = 0
for i in range(col_sz):
    code = flights_json['airport_code'][i]
    if i == col_sz - 1:
        months[i] = mon_dic[cur_mon]
    elif flights_json['airport_code'][i] > flights_json['airport_code'][i + 1]:
        months[i] = mon_dic[cur_mon]
        cur_mon = 0 if cur_mon == 11 else cur_mon + 1
    else:
        months[i] = mon_dic[cur_mon]

flights_json = flights_json.with_columns(pl.Series('month', months))

car_delay = flights_json['num_of_delays_carrier'].to_list()
air_delay = flights_json['num_of_delays_late_aircraft'].to_list()

for i in range(len(flights_json['num_of_delays_total'])):
    if (car_delay[i] == '1500+') & (air_delay[i] == -999.0):
        val = flights_json['num_of_delays_total'][i] - (
            flights_json['num_of_delays_weather'][i]
            + flights_json['num_of_delays_security'][i]
            + flights_json['num_of_delays_nas'][i]
        )

        # val2 = val - (val // 2)
        val2 = int(flights_json.filter(pl.col('num_of_delays_late_aircraft') >= 0).select(pl.col('num_of_delays_late_aircraft').mean().alias('delay_mean'))['delay_mean'][0])

        # val2 should be the mean of that column

        if val - val2 <= 1500:
            car_delay[i] = 1501
            air_delay[i] = val - 1501
        else:
            car_delay[i] = val - val2
            air_delay[i] = val2
    elif air_delay[i] == -999.0:
        val = flights_json['num_of_delays_total'][i] - (
            flights_json['num_of_delays_weather'][i]
            + flights_json['num_of_delays_security'][i]
            + flights_json['num_of_delays_nas'][i]
            + int(flights_json['num_of_delays_carrier'][i])
        )
        air_delay[i] = val
    elif car_delay[i] == '1500+':
        val = flights_json['num_of_delays_total'][i] - (
            flights_json['num_of_delays_weather'][i]
            + flights_json['num_of_delays_security'][i]
            + flights_json['num_of_delays_nas'][i]
            + flights_json['num_of_delays_late_aircraft'][i]
        )
        car_delay[i] = val

car_delay_flt = [float(x) for x in car_delay]

flights_json = flights_json.with_columns(pl.Series('num_of_delays_carrier', car_delay_flt, dtype=pl.Float64), pl.Series('num_of_delays_late_aircraft', air_delay, dtype=pl.Float64))

# print(flights_json.tail(5))
```

## QUESTION 1

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month.

The best month to fly to avoid delays of any length would be September since its delay ratio is the lowest. Using the ratio is more representative since it reflects the likelyhood of having a delayed flight rather than few delays since there are fewer flights.

```{python}
# delays / flights
flights_json = flights_json.with_columns(
    (pl.col('num_of_delays_total') / pl.col('num_of_flights_total')).alias('delay_ratio'),
    ((pl.col('minutes_delayed_total') / pl.col('num_of_delays_total')) / 60).alias('average_delay_time_hours')
)

flights_json = flights_json.with_columns(
    (pl.col('delay_ratio') * pl.col('average_delay_time_hours') * 60).alias('expected_delay_minutes')
)
```

```{python}
delays = flights_json.group_by('month').agg(
    [pl.col('num_of_delays_total').sum(),
    pl.col('num_of_flights_total').sum(),
    pl.col('delay_ratio').mean(),
    pl.col('average_delay_time_hours').mean(),
    pl.col('expected_delay_minutes').mean()
    ]
)

delays = delays.sort('delay_ratio', descending=True)

delays
```

```{python}
delay_bar = (
    ggplot(data=delays)
        + geom_bar(mapping = aes(x = 'month', y = 'delay_ratio', fill='month', color='month'), stat='identity')
        + guides(color="none")
        + labs(
          title="Liklehood of delays by month.",
          subtitle="Shown for each month.",
          x="Month",
          y="Delay Liklehood",
          fill='Month'
        )
        + theme(
            panel_background=element_rect(fill='gray'),
            plot_background=element_rect(fill='gray'),
            panel_grid_major=element_rect(fill='gray'),
            legend_background=element_rect(fill='gray'),
            axis_text=element_text(color='white'),
            axis_title=element_text(color='white'),
            plot_title=element_text(color='white'),
            plot_subtitle=element_text(color='white'),
            legend_text=element_text(color='white'),
            legend_title=element_text(color='white')
        )
)

delay_bar
```
