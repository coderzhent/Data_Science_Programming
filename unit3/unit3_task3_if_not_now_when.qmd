---
title: "Client Report - If not now, when?"
subtitle: "Unit 3 Task 3"
author: "Ezekial Curran"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import polars as pl
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
flights_json = pl.read_json('flights_missing.json')
```


```{python}
# Beginning of cleaning the data

flights_json = flights_json.with_columns(
    pl.col('year').fill_null(strategy='backward')
)

flights_json = flights_json.with_columns(
    pl.col('month').replace({'Febuary': 'February'}).alias('month')
)

# predicting months:
flights_json = flights_json.with_columns(
    pl.when((pl.col('month') == 'n/a') & (pl.col('month').shift(1) == pl.col('month').shift(-1)) & (pl.col('month').shift(1) != 'n/a'))
    .then(pl.col('month').shift(1))
    .when((pl.col('month') == 'n/a') & (pl.col('airport_code') < pl.col('airport_code').shift(1)) & (pl.col('month').shift(-1) != 'n/a'))
    .then(pl.col('month').shift(-1))
    .when((pl.col('month') == 'n/a') & (pl.col('airport_code') > pl.col('airport_code').shift(1)) & (pl.col('month').shift(1) != 'n/a'))
    .then(pl.col('month').shift(1))
    .when((pl.col('month') == 'n/a') & (pl.col('airport_code') < pl.col('airport_code').shift(-1)) & (pl.col('month').shift(-1) != 'n/a'))
    .then(pl.col('month').shift(-1))
    .otherwise(pl.col('month'))
    .alias('month')
)

# Fixing airport names:
airports = flights_json.select(['airport_code', 'airport_name']).filter((pl.col('airport_name') != "")).unique().sort(by='airport_code', descending=False)
airport_dic = dict(zip(airports['airport_code'], airports['airport_name']))
flights_json = flights_json.with_columns(airport_name=pl.col('airport_code').replace(airport_dic))

# Fixing minutes
flights_json = flights_json.with_columns(
    pl.col('minutes_delayed_nas').fill_null(-999.0),
    pl.col('minutes_delayed_carrier').fill_null(-999.0)
)

adj = pl.col('minutes_delayed_total') - pl.col('minutes_delayed_weather') - pl.col('minutes_delayed_security') - pl.col('minutes_delayed_late_aircraft')

flights_json = flights_json.with_columns(
    pl.when((pl.col('minutes_delayed_carrier') < 0) & (pl.col('minutes_delayed_nas') > 0))
    .then(adj - pl.col('minutes_delayed_nas'))
    .when((pl.col('minutes_delayed_carrier') < 0) & (pl.col('minutes_delayed_nas') < 0))
    .then((adj) / 2)
    .otherwise(pl.col('minutes_delayed_carrier'))
    .alias('minutes_delayed_carrier')
)

flights_json = flights_json.with_columns(
    pl.when(pl.col('minutes_delayed_nas') < 0)
    .then(adj - pl.col('minutes_delayed_carrier'))
    .otherwise(pl.col('minutes_delayed_nas'))
    .alias('minutes_delayed_nas')
)

# Fixing number of delays
flights_json = flights_json.with_columns(
    num_of_delays_carrier=pl.col('num_of_delays_carrier').replace('1500+', '-999')
)

flights_json = flights_json.with_columns(
    pl.col('num_of_delays_carrier').cast(pl.Int64).alias('num_of_delays_carrier')
)

adj_num = pl.col('num_of_delays_total') - pl.col('num_of_delays_weather') - pl.col('num_of_delays_security') - pl.col('num_of_delays_nas')

flights_json = flights_json.with_columns(
    pl.when((pl.col('num_of_delays_late_aircraft') < 0) & (pl.col('num_of_delays_carrier') > 0))
    .then(adj_num - pl.col('num_of_delays_carrier'))
    .when((pl.col('num_of_delays_late_aircraft') < 0) & (pl.col('num_of_delays_carrier') < 0))
    .then(((adj_num) / 2).cast(pl.Int64))
    .otherwise(pl.col('num_of_delays_late_aircraft'))
    .alias('num_of_delays_late_aircraft')
)

flights_json = flights_json.with_columns(
    pl.when((pl.col('num_of_delays_carrier') < 0) & (pl.col('num_of_delays_late_aircraft') > 0))
    .then(adj_num - pl.col('num_of_delays_late_aircraft'))
    .otherwise(pl.col('num_of_delays_carrier'))
    .alias('num_of_delays_carrier')
)

print(f"Data has been cleaned!")
```

## QUESTION 1

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month.

The best month to fly to avoid delays of any length would be September since its delay ratio is the lowest. Using the ratio is more representative since it reflects the likelyhood of having a delayed flight rather than few delays since there are fewer flights.

```{python}
# delays / flights
flights_json = flights_json.with_columns(
    (pl.col('num_of_delays_total') / pl.col('num_of_flights_total')).alias('delay_ratio'),
    ((pl.col('minutes_delayed_total') / pl.col('num_of_delays_total')) / 60).alias('average_delay_time_hours')
)

flights_json = flights_json.with_columns(
    (pl.col('delay_ratio') * pl.col('average_delay_time_hours') * 60).alias('expected_delay_minutes')
)
```

```{python}
delays = flights_json.group_by('month').agg(
    [pl.col('num_of_delays_total').sum(),
    pl.col('num_of_flights_total').sum(),
    pl.col('delay_ratio').mean(),
    pl.col('average_delay_time_hours').mean(),
    pl.col('expected_delay_minutes').mean()
    ]
)

month_order = {
    "January": 1,
    "February": 2,
    "March": 3,
    "April": 4,
    "May": 5,
    "June": 6,
    "July": 7,
    "August": 8,
    "September": 9,
    "October": 10,
    "November": 11,
    "December": 12
}
delays = delays.with_columns(
    pl.col("month").replace_strict(month_order).alias("month_num")
).sort("month_num")

delays
```

```{python}
delay_bar = (
    ggplot(data=delays)
        + geom_bar(mapping = aes(x = 'month', y = 'delay_ratio', fill='month', color='month'), stat='identity')
        + guides(color="none")
        + labs(
          title="Liklehood of delays by month.",
          subtitle="Shown for each month.",
          x="Month",
          y="Delay Liklehood",
          fill='Month'
        )
        + theme(
            panel_background=element_rect(fill='gray'),
            plot_background=element_rect(fill='gray'),
            panel_grid_major=element_rect(fill='gray'),
            legend_background=element_rect(fill='gray'),
            axis_text=element_text(color='white'),
            axis_title=element_text(color='white'),
            plot_title=element_text(color='white'),
            plot_subtitle=element_text(color='white'),
            legend_text=element_text(color='white'),
            legend_title=element_text(color='white')
        )
)

delay_bar
```
