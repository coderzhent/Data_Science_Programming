---
title: "Client Report - Highest Paid Positions"
subtitle: "Unit 2 Task 4"
author: "Ezekial Curran"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import polars as pl
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. Alos include the total players for that position as well as the highest salary.__

Something to keep in mind about the player counts for each position is some player played multiple positions which can result in misleading player total. The total number of players on the salary table is 5,149 whereas the total number of players that show on the fielding table is 19,491 palyers. Aggregate functions or statistics like count or average will only include rows that have values and ignore nulls. The total count of unique playerID's that show for each position (even if they played multiple positions) is 8285. The second table resolves some of this.

```{python}
# Include and execute your code here
q1 = '''
WITH all_players AS (
  SELECT playerID, yearID FROM salaries
  UNION
  SELECT playerID, yearID FROM fielding
)
SELECT f.POS as "Position", AVG(s.salary) as average_salary, MAX(s.salary) as "Highest Salary", COUNT(DISTINCT ap.playerID) as "Total Players", CASE
  WHEN AVG(s.salary) > 3000000 THEN 'High Salary'
  WHEN AVG(s.salary) > 2000000 THEN 'Medium Salary'
  ELSE 'Low Salary'
  END AS salary_category
FROM all_players as ap
JOIN salaries as s
  ON ap.playerID = s.playerID AND ap.yearID = s.yearID
JOIN fielding as f
  ON ap.playerID = f.playerID AND ap.yearID = f.yearID
GROUP BY "Position"
ORDER BY average_salary DESC
'''

res1_pl = pl.read_database(q1, con)
print(res1_pl)
```

### Additional Constraints

__Eliminating players repeated positions for the same year by picking the position they played the most for that year. If a player played two positions the same number of times then it picks alphabetially by position name.__

As can be seen in this new table with the added restrictions, position salaries and total players changed. This brought down the total player count to 5,925 which is closer to the number of players present in the salaries table but still includes a few players from the fielding table.

```{python}
# The second WITH clause resolves when players play multiple positions in the same year by picking the one they played the most games as. If there is a tie between the number of games it picks the one alphabetically by position name.

q2 = '''
WITH all_players AS (
  SELECT playerID, yearID FROM salaries
  UNION
  SELECT playerID, yearID FROM fielding
),
new_fielding AS (
  SELECT f.playerID, f.yearID, f.POS, f.G
  FROM fielding as f
  WHERE f.G = (
    SELECT MAX(f2.G)
    FROM fielding as f2
    WHERE f2.playerID = f.playerID AND f.yearID = f2.yearID
    ORDER BY f2.G DESC, f2.POS ASC
    LIMIT 1
  )
)
SELECT f.POS as "Position", AVG(s.salary) as average_salary, MAX(s.salary) as "Highest Salary", COUNT(DISTINCT ap.playerID) as "Total Players", CASE
  WHEN AVG(s.salary) > 3000000 THEN 'High Salary'
  WHEN AVG(s.salary) > 2000000 THEN 'Medium Salary'
  ELSE 'Low Salary'
  END AS salary_category
FROM all_players as ap
JOIN salaries as s
  ON ap.playerID = s.playerID AND ap.yearID = s.yearID
JOIN new_fielding as f
  ON ap.playerID = f.playerID AND ap.yearID = f.yearID
GROUP BY "Position"
ORDER BY average_salary DESC
'''

# SELECT f.playerID, f.yearID, f.POS, f.G
# FROM fielding as f
# WHERE f.G = (
#   SELECT MAX(f2.G)
#   FROM fielding as f2
#   WHERE f2.playerID = f.playerID AND f.yearID = f2.yearID
# )
# ORDER BY playerID DESC
# LIMIT 10

res2_pl = pl.read_database(q2, con)
print(res2_pl)
```